const Article = require('../models/Article');

// ğŸ”¹ RÃ©cupÃ©rer tous les articles de l'utilisateur connectÃ©
exports.getUserArticles = async (req, res) => {
  try {
    const articles = await Article.find({ author: req.user._id });
    res.status(200).json(articles);
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// ğŸ”¹ CrÃ©er un nouvel article
exports.createArticle = async (req, res) => {
  const { title, content } = req.body;

  try {
    const article = new Article({
      title,
      content,
      author: req.user._id, // Rattacher l'article Ã  l'utilisateur connectÃ©
    });

    await article.save();
    res.status(201).json({ message: 'Article crÃ©Ã©', article });
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la crÃ©ation' });
  }
};

// ğŸ”¹ Modifier un article existant
exports.updateArticle = async (req, res) => {
  const { title, content } = req.body;
  const { id } = req.params;

  try {
    const article = await Article.findById(id);

    // VÃ©rifie que l'article existe
    if (!article) return res.status(404).json({ message: 'Non trouvÃ©' });

    // VÃ©rifie que l'article appartient bien Ã  l'utilisateur connectÃ©
    if (article.author.toString() !== req.user._id.toString())
      return res.status(403).json({ message: 'Non autorisÃ©' });

    // Mise Ã  jour
    article.title = title || article.title;
    article.content = content || article.content;
    await article.save();

    res.status(200).json({ message: 'Article mis Ã  jour', article });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// ğŸ”¹ Supprimer un article
exports.deleteArticle = async (req, res) => {
  const { id } = req.params;

  try {
    const article = await Article.findById(id);
    if (!article) return res.status(404).json({ message: 'Non trouvÃ©' });

    // VÃ©rifie que l'utilisateur est bien l'auteur
    if (article.author.toString() !== req.user._id.toString())
      return res.status(403).json({ message: 'Non autorisÃ©' });

    await article.remove();
    res.status(200).json({ message: 'Article supprimÃ©' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// ğŸ”¹ Liker un article
exports.likeArticle = async (req, res) => {
  const { id } = req.params;
  try {
    const article = await Article.findById(id);
    if (!article) return res.status(404).json({ message: 'Article non trouvÃ©' });

    // EmpÃªche de liker deux fois
    if (article.likes.includes(req.user._id)) {
      return res.status(400).json({ message: 'Vous avez dÃ©jÃ  likÃ© cet article' });
    }

    // Retire le dislike sâ€™il existe
    if (article.dislikes.includes(req.user._id)) {
      article.dislikes.pull(req.user._id);
    }

    article.likes.push(req.user._id);
    await article.save();

    res.status(200).json({ message: 'Article likÃ©', article });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// ğŸ”¹ Disliker un article
exports.dislikeArticle = async (req, res) => {
  const { id } = req.params;
  try {
    const article = await Article.findById(id);
    if (!article) return res.status(404).json({ message: 'Article non trouvÃ©' });

    // EmpÃªche de disliker deux fois
    if (article.dislikes.includes(req.user._id)) {
      return res.status(400).json({ message: 'Vous avez dÃ©jÃ  dislikÃ© cet article' });
    }

    // Retire le like sâ€™il existe
    if (article.likes.includes(req.user._id)) {
      article.likes.pull(req.user._id);
    }

    article.dislikes.push(req.user._id);
    await article.save();

    res.status(200).json({ message: 'Article dislikÃ©', article });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur' });
  }
};
